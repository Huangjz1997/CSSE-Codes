package queues;

import java.lang.reflect.Array;
import java.util.NoSuchElementException;

/**
 * A circular queue that grows as needed.
 * 
 * @author Matt Boutell and <<<your name here>>>
 * @param <T>
 */
public class GrowableCircularArrayQueue<T> implements SimpleQueue<T> {
	// DONE: Declare this class to implement SimpleQueue<T>, then add the
	// missing methods (Eclipse will help).
	// TODO: The javadoc for overridden methods is in the MyQueue interface.
	// Read it!

	private static final int INITIAL_CAPACITY = 5;

	private T[] array;
	private Class<T> type;
	private int first;
	private int last;
	private int numberOfElements;
	
	/**
	 * Creates an empty queue with an initial capacity of 5
	 * 
	 * @param type
	 *            So that an array of this type can be constructed.
	 */
	@SuppressWarnings("unchecked")
	public GrowableCircularArrayQueue(Class<T> type) {
		this.type = type;
		// This is a workaround due to a limitation Java has with
		// constructing generic arrays.
		this.array = (T[]) Array.newInstance(this.type, INITIAL_CAPACITY);
		this.first = 0;
		this.last= 0;
		this.numberOfElements = 0;
	}

	/**
	 * Displays the contents of the queue in insertion order, with the
	 * most-recently inserted one last, in other words, not wrapped around. Each
	 * adjacent pair will be separated by a comma and a space, and the whole
	 * contents will be bounded by square brackets. See the unit tests for
	 * examples.
	 */
	@Override
	public String toString() {
		// TODO: implement this method
		
		return "replace me";
	}

	@Override
	public void clear() {
		this.array=(T[]) Array.newInstance(this.type, INITIAL_CAPACITY);
		this.first = 0;
		this.last = 0;
		this.numberOfElements = 0;
		
	}

	@Override
	public void enqueue(T item) {		
		if(this.numberOfElements == this.array.length -1){
			//DOUBLE ARRAY SIZE
			T[] newArray = (T[]) Array.newInstance(this.type, this.array.length*2);
			for(int i =0; i<this.array.length; i++){
				newArray[i] = this.array[i];
			}
		}
		this.array[this.last+1] = item;
		this.last = (this.last-1) % this.array.length;
		this.numberOfElements++;
	}

	@Override
	public T dequeue() throws NoSuchElementException {
		//TODO
		if (this.isEmpty()) throw new NoSuchElementException();
		this.first = (this.first-1) % this.numberOfElements;
		this.numberOfElements--;
		return this.array[this.first];
	}

	@Override
	public T peek() throws NoSuchElementException {
		if (this.isEmpty()) throw new NoSuchElementException();
		//TODO
		return this.array[this.first];
	}

	@Override
	public boolean isEmpty() {
		return this.size() == 0;
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return this.array.length;
	}

	@Override
	public boolean contains(T item) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public String debugString() {
		// TODO Auto-generated method stub
		return null;
	}

}

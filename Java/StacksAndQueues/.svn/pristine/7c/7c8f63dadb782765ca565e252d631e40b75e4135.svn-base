package evaluator;

import java.util.Stack;

public class InfixEvaluator extends Evaluator {

	private Stack numStack = new Stack();
	private Stack opStack = new Stack();
	private Stack<String> stack = new Stack<>();

	@Override
	public int evaluate(String expression) throws ArithmeticException {
		String[] elements = expression.split(" ");
		return 0;
	}

	public String convertToPostfix(String exp) {
		for (int i = 0; i < exp.length(); i++) {
			char c = exp.charAt(i);
			if (c == '+') {
				String b = this.stack.pop();
				String a = this.stack.pop();
				this.stack.push("(" + a + c + b + ")");
			} else if (c == '-') {
				String b = this.stack.pop();
				String a = this.stack.pop();
				this.stack.push("(" + a + c + b + ")");
			} else if (c == '*') {
				String b = this.stack.pop();
				String a = this.stack.pop();
				this.stack.push("(" + a + c + b + ")");
			} else if (c == '/') {
				String b = this.stack.pop();
				String a = this.stack.pop();
				this.stack.push("(" + a + c + b + ")");
			} else if (c == '^') {
				String b = this.stack.pop();
				String a = this.stack.pop();
				this.stack.push("(" + a + c + b + ")");
			} else {
				this.stack.push(c + "");
			}
		}
		return this.stack.pop();

	}
}

package evaluator;

import java.util.Stack;

public class InfixEvaluator extends Evaluator {

	private Stack<String> stack = new Stack<>();

	public int getlv(String c){
		switch (c) {
		case "+":case"-":
			return 1;
		case "*":case"/":
			return 2;
		case "^":
			return 3;
		case "(":case ")":
			return -1;
		default:
			break;
		}
		return 0;
	}
	

	@Override
	public int evaluate(String expression) throws ArithmeticException {
		try{
			PostfixEvaluator evaluator=new PostfixEvaluator();
			return(evaluator.evaluate(this.convertToPostfix(expression)));
		}
		catch(ArithmeticException e){
			throw new ArithmeticException();
		}
	}

	public String convertToPostfix(String exp) {
		String[] elements = exp.split(" ");
		String anString=new String();
		boolean isdigital=false;
		for (String c:elements) {
			if (this.isOperator(c)){
				if ((!c.equals("(")) &&(!c.equals(")"))){
					if (!isdigital) throw new ArithmeticException();
					isdigital=false;
				}
				if (stack.isEmpty()) {stack.push(c);continue;}
				if (c.equals("(")) {stack.push(c);continue;}
				if (c.equals(")")){
					boolean flag=false;
					while ((!stack.empty()) &&(!flag)){
						if (!stack.peek().equals("(")) anString=anString+stack.pop()+" ";
						else
						{
							stack.pop();
							flag=true;
						}
					}
					if (!flag) throw new ArithmeticException();
				}
				else
				{	
					String a=stack.peek();
					while (this.getlv(c)<=this.getlv(a)){
						anString=anString+stack.pop()+" ";
						if (stack.isEmpty()) break;
						a=stack.peek();
					}
					stack.push(c);
				}
			}
			else
			{
				if (isdigital) throw new ArithmeticException();
				isdigital=true;
				anString=anString+c+" ";
			}
		}
		while (!stack.isEmpty()){
			if (stack.peek().equals("(")) throw new ArithmeticException();
			anString=anString+stack.pop()+" ";
		}
		return anString.substring(0,anString.length()-1);
}

}
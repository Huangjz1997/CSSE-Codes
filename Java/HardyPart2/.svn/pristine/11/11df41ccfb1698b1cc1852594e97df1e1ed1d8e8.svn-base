package hardysTaxi;

import java.util.ArrayList;

import editortrees.EditTree;
import editortrees.Node;

// A height-balanced binary tree with rank that could be the basis for a text editor.

public class EditTree {
	public static Node NULL_NODE = new Node();
	private Node root;
	public int numOfRotation;
	private int size;

	/**
	 * Construct an empty tree
	 */
	public EditTree() {
		this.root = NULL_NODE;
		size=0;
	}

	public EditTree(Node root) {
		this.root = root;
		this.root.updateHeight();
	}

	/**
	 * Construct a single-node tree whose element is c
	 * 
	 * @param c
	 */


	/**
	 * 
	 * @return the height of this tree
	 */
	public int height() {
		return this.root.height;
	}

	/**
	 * 
	 * returns the total number of rotations done in this tree since it was
	 * created. A double rotation counts as two.
	 *
	 * @return number of rotations since tree was created.
	 */
	public int totalRotationCount() {
		return this.numOfRotation; // replace by a real calculation.
	}



	/**
	 * This one asks for more info from each node. You can write it like the
	 * arraylist-based toString() method from the BST assignment. However, the
	 * output isn't just the elements, but the elements, ranks, and balance
	 * codes. Former CSSE230 students recommended that this method, while making
	 * it harder to pass tests initially, saves them time later since it catches
	 * weird errors that occur when you don't update ranks and balance codes
	 * correctly. For the tree with node b and children a and c, it should
	 * return the string: [b1=, a0=, c0=] There are many more examples in the
	 * unit tests.
	 * 
	 * @return The string of elements, ranks, and balance codes, given in a
	 *         pre-order traversal of the tree.

	/**
	 * 
	 * @param pos
	 *            position in the tree
	 * @return the character at that position
	 * @throws IndexOutOfBoundsException
	 */
	public Long get(int pos) throws IndexOutOfBoundsException {
		if (pos < 0 || pos >= this.root.size())
			throw new IndexOutOfBoundsException();
		return this.root.get(pos);

	}

	/**
	 * 
	 * @param c
	 *            character to add to the end of this tree.
	 */
	public void add(Long c) {
		// add c into the rightest of the tree
		size++;
		this.root=this.insert(root, c);
	}
	// helper method of add
	private Node insert(Node root, Long c) {
		// if root==NULL_NODE we just add the new node on the leaf of the tree
		if (root == NULL_NODE)
			return new Node(c);
		// should insert it into left subtree;
		if (root.data.compareTo(c)>0) {
			root.left = insert(root.left, c);
			root.rank++;
		} else if (root.data.compareTo(c)<0)
			root.right = insert(root.right, c);

		// update the height by O(1)
		root.height();
		// if the current node is not balance, rotate it.
		if (Math.abs(root.balance()) > 1)
			return rotation(root);

		return root;
	}

	private Node rotation(Node root) {

		// left is deeper
		if (root.balance() > 0) {
			if (root.left.balance() >= 0) {
				// left child's left is deeper Single Right rotation
				return right_rotation(root);
			}

			if (root.left.balance() < 0) {
				// left child's right is deeper Double Right rotation
				root.left = left_rotation(root.left);
				return right_rotation(root);
			}
		}

		// right is deeper
		if (root.balance() < 0) {
			if (root.right.balance() <= 0) {
				// right child's right is deeper Single Left rotation
				return left_rotation(root);
			}

			if (root.right.balance() > 0) {
				// right child's left is deeper Double Left rotation
				root.right = right_rotation(root.right);
				return left_rotation(root);
			}
		}
		// Impossible to reach here
		return new Node();
	}

	private Node left_rotation(Node root) {
		this.numOfRotation++;
		Node child = root.right;
		// change the rank
		child.rank = root.rank + child.rank + 1;
		// change the relationship
		root.right = child.left;
		child.left = root;
		// update their heights
		root.height();
		child.height();
		return child;
	}

	private Node right_rotation(Node root) {
		this.numOfRotation++;
		Node child = root.left;
		root.rank = root.rank - child.rank - 1;
		// change the relationship
		root.left = child.right;
		child.right = root;
		// update their heights
		root.height();
		child.height();
		return child;
	}

	public boolean contains(Long c){
		return this.contain(root,c);
	}
	private boolean contain(Node root,Long c) {
		if (root==NULL_NODE) return false;
		if (c.equals(root.data)) return true;
		if (root.data.compareTo(c)>0) return contain(root.left, c);
		return contain(root.right, c);
	}

	/**
	 * 
	 * @return the number of nodes in this tree
	 */
	public int size() {
		return size;
	}
	/**
	 * @return The root of this tree.
	 */
	public Node getRoot() {
		return this.root;
	}

	
	public EditTree delete(int start, int length) throws IndexOutOfBoundsException {
		if (start < 0 || start + length >= this.size())
			throw new IndexOutOfBoundsException(
					(start < 0) ? "negative first argument to delete" : "delete range extends past end of string");
		EditTree t2 = this.split(start);
		EditTree t3 = t2.split(length);
		this.concatenate(t3);
		return t2;
	}

	/**
	 * Don't worry if you can't do this one efficiently.
	 * 
	 * @param s
	 *            the string to look for
	 * @return the position in this tree of the first occurrence of s; -1 if s
	 *         does not occur
	 */
	public int find(String s) {
		return this.findHelper(s, 0);
	}

	/**
	 * 
	 * @param s
	 *            the string to search for
	 * @param pos
	 *            the position in the tree to begin the search
	 * @return the position in this tree of the first occurrence of s that does
	 *         not occur before position pos; -1 if s does not occur
	 */
	public int find(String s, int pos) {
		return this.findHelper(s, pos);
	}

	public int findHelper(String s, int pos) {
		if (s.isEmpty())
			return 0;
		String str = this.toString();
		for (int i = pos; i < this.size(); i++) {
			if (str.charAt(i) == s.charAt(0)) {
				if (str.substring(i, i + s.length()).equals(s)) {
					return i;
				}
			}
		}
		return -1;
	}

	/**
	 * Append (in time proportional to the log of the size of the larger tree)
	 * the contents of the other tree to this one. Other should be made empty
	 * after this operation.
	 * 
	 * @param other
	 * @throws IllegalArgumentException
	 *             if this == other
	 */
	public void concatenate(EditTree other) throws IllegalArgumentException {
		// If two trees are the same, throw exception.
		if (this.equals(other))
			throw new IllegalArgumentException();
		other.root.updateHeight();
		if (other.root == NULL_NODE)
			return;
		// If the tree is empty, set it equals to the other tree.
		if (this.root == NULL_NODE) {
			this.root = other.root;
			this.root.updateHeight();
			other.root = NULL_NODE;
			return;
		}
		// Paste other tree and tree to the node q which deleted from one of the
		// tree.
		if (other.root.height > this.root.height) {
			Node q = new Node(this.delete(this.size() - 1));
			other.root = paste(this.root, q, other.root, -1);
			this.root = other.root;
			other.root = NULL_NODE;
			return;
		}
		Node q = new Node(other.delete(0));
		this.root = paste(this.root, q, other.root, 1);
		other.root = NULL_NODE;
	}
	
	// Paste T and V as q.left and q.right. Delta represent the direction of
	// paste(either right or left).
	public Node paste(Node T, Node q, Node V, int delta) {
		if ((T.height == V.height) || (V.height + delta == T.height)) {
			q.left = T;
			q.right = V;
			q.height();
			q.rank = q.left.size();
			return q;
		}
		if (delta == 1) {
			T.right = paste(T.right, q, V, delta);
			T.height();
			if (Math.abs(T.balance()) > 1)
				return rotation(T);
			return T;
		} else {
			V.left = paste(T, q, V.left, delta);
			V.height();
			if (Math.abs(V.balance()) > 1)
				return rotation(V);
			return V;
		}
	}

	// Split a tree into two trees in position pos.
	private void split(int pos, Node[] s, Node[] t, Node root) {
		if (root.rank == pos) {
			s[0] = root.left;
			if (root.right == NULL_NODE)
				t[0] = new Node(root.data);
			else
				t[0] = this.insert(root.right, root.data, 0);
			return;
		}
		if (root.rank > pos) {
			split(pos, s, t, root.left);
			t[0] = merge(t[0], root, root.right);
			return;
		}
		split(pos - root.rank - 1, s, t, root.right);
		s[0] = merge(root.left, root, s[0]);
	}

	// Combine the two trees.
	private Node merge(Node a, Node b, Node c) {
		if (a == NULL_NODE)
			return insert(c, b.data, 0);
		if (c == NULL_NODE)
			return insert(a, b.data, a.size());
		if (a.height > c.height)
			return paste(a, b, c, 1);
		return paste(a, b, c, -1);
	}

	/**
	 * This operation must be done in time proportional to the height of this
	 * tree.
	 * 
	 * @param pos
	 *            where to split this tree
	 * @return a new tree containing all of the elements of this tree whose
	 *         positions are >= position. Their nodes are removed from this
	 *         tree.
	 * @throws IndexOutOfBoundsException
	 */
	public EditTree split(int pos) throws IndexOutOfBoundsException {
		if (pos < 0 || pos > this.size())
			throw new IndexOutOfBoundsException();
		Node[] s = new Node[2];
		Node[] t = new Node[2];
		split(pos, s, t, this.root);
		this.root = s[0];
		return new EditTree(t[0]);
	}
}

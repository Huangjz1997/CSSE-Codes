package editortrees;

import java.util.ArrayList;

// A height-balanced binary tree with rank that could be the basis for a text editor.

public class EditTree {
	//some constant char for BalanceCode
	private static char SAME='=';
	private static char LEFT='/';
	private static char RIGHT='\\';
	
	private class Node{
		public int rank;											
		public char data;											//Store the data of the node
		public Node left,right,father;								
		public char bal; 											//BalanceCode
		
		public Node(){
			this.left=null;
			this.right=null;
			this.father=null;
		}
		
		public Node(char c,Node father){
			this.data=c;	
			this.rank=0;
			this.bal=SAME;
			this.left=NULL_NODE;
			this.right=NULL_NODE;
			this.father=father;
		}
		
		public int size(){
			if (this==NULL_NODE) return 0;
			return 1+this.rank+this.right.size();
		}
		
		public Node clone(){
			Node tmp=new Node(this.data,this.father);
			tmp.left=this.left;
			tmp.right=this.right;
			tmp.bal=this.bal;
			tmp.rank=this.rank;
			return tmp;
		}

		public int height() {
			if (this==NULL_NODE) return -1;
			return 1+Math.max(this.left.height(), this.right.height());
		}

		public char get(int pos) {
			if (pos==this.rank) return this.data;
			if (pos<this.rank) return this.left.get(pos);
			return this.right.get(pos-rank-1);
		}

		public void toString(StringBuilder ans) {
			if (this==NULL_NODE) return;
			this.left.toString(ans);
			ans.append(this.data);
			this.right.toString(ans);
		}

		public void toDebugArrayList(ArrayList<String> ans) {
			if (this==NULL_NODE) return;
			String tmp=String.valueOf(this.data);
			tmp+=String.valueOf(this.rank)+String.valueOf(this.bal);
			ans.add(tmp);
			this.left.toDebugArrayList(ans);
			this.right.toDebugArrayList(ans);
		}

		//DONE
		public boolean add(char c, int pos) {
			boolean flag=false;
			if (pos<=this.rank){
				this.rank++;
				if (this.left==NULL_NODE) this.left=new Node(c,this); else flag=this.left.add(c, pos);
				if (flag) return flag;
				if (changeBal(LEFT)){
					if (this.bal==this.left.bal){
						this.bal=SAME;
						this.left.bal=SAME;
						zig(this, this.left); 
					}
					else{
						if (this.left.right.bal==RIGHT) {
							this.bal=SAME;
							this.left.bal=LEFT;
						}else
						if (this.left.right.bal==LEFT) {
							this.bal=RIGHT;
							this.left.bal=SAME;
						}else {
							this.bal=SAME;
							this.left.bal=SAME;
						}
						this.left.right.bal=SAME;					
						zag(this.left, this.left.right);
						zig(this, this.left);
					}
					return true;
				}
				if (this.bal==SAME) return true;
				return false;
			}
			else{
				if (this.right==NULL_NODE) this.right=new Node(c,this); else flag=this.right.add(c, pos-1-this.rank);
				if (flag) return flag;
				if (changeBal(RIGHT)){
					if (this.bal==this.right.bal){
						this.bal=SAME;
						this.right.bal=SAME;
						zag(this, this.right);
					}
					else{
						if (this.right.left.bal==LEFT) {
							this.bal=SAME;
							this.right.bal=RIGHT;
						}else
						if (this.right.left.bal==RIGHT) {
							this.bal=LEFT;
							this.right.bal=SAME;
						}else {
							this.bal=SAME;
							this.right.bal=SAME;
						}
						this.right.left.bal=SAME;
						zig(this.right, this.right.left);
						zag(this,this.right);
					}
					return true;
				}
				if (this.bal==SAME) return true;
				return false;
			}
			
		}
		private boolean changeBal(char k){
			if (k==LEFT){
				if (this.bal==LEFT) return true;
				if (this.bal==SAME) this.bal=LEFT;
				if (this.bal==RIGHT) this.bal=SAME;
			}
			else{
				if (this.bal==RIGHT) return true;
				if (this.bal==SAME) this.bal=RIGHT;
				if (this.bal==LEFT) this.bal=SAME;
			}
			return false;
		}

		public void debug(StringBuilder ans) {
			if (this==NULL_NODE) return;
			ans.append(this.data);
			ans.append("("+this.father.data+")");
			if (this.left==NULL_NODE && this.right==NULL_NODE) return;
			ans.append("[");
			this.left.debug(ans);
			ans.append(",");
			this.right.debug(ans);
			ans.append("]");		
			
		}
	}
	
	//-----------------------------------------------------------------------------------------------
	//End of the Node class
	//-----------------------------------------------------------------------------------------------
	private int NumOfRotation;
	private Node root;
	private Node NULL_NODE=new Node();								//Set the NULL_NODE 

	/**
	 * Construct an empty tree
	 */
	
	//DONE
	public EditTree() {												
		this.root=NULL_NODE;
	}

	/**
	 * Construct a single-node tree whose element is c
	 * 
	 * @param c
	 */
	
	//DONE
	public EditTree(char c) {
		this.root=new Node(c,NULL_NODE);
	}

	/**
	 * Create an EditTree whose toString is s. This can be done in O(N) time,
	 * where N is the length of the tree (repeatedly calling insert() would be
	 * O(N log N), so you need to find a more efficient way to do this.
	 * 
	 * @param s
	 */
	//DONE: MileStone1
	public EditTree(String s) {
		this();
		if (s.length()==0) return;
		this.root=buildTree(s, NULL_NODE);	
	}

	/**
	 * Make this tree be a copy of e, with all new nodes, but the same shape and
	 * contents.
	 * 
	 * @param e
	 */
	//DONE: MileStone1
	public EditTree(EditTree e) {
		this.root=cloneTree(e.root);
	}

	/**
	 * 
	 * @return the height of this tree
	 */
	
	public Node cloneTree(Node node){
		if (node==NULL_NODE) return NULL_NODE;
		Node tmp=node.clone();
		tmp.left=cloneTree(node.left);
		tmp.right=cloneTree(node.right);
		return tmp;
	}
	public Node buildTree(String s,Node father){
		if (s.length()==0) return NULL_NODE;
		int l=s.length();
		Node tmp=new Node(s.charAt(l/2),father);
		tmp.left=buildTree(s.substring(0,l/2), tmp);
		tmp.right=buildTree(s.substring(l/2+1,l), tmp);
		return tmp;	
	}
	//DONE: MileStone1
	public int height() {
		return root.height(); 
	}

	//right rotation
	private void zig(Node me,Node child){
		NumOfRotation++;
		me.rank=me.rank-child.rank-1;
		me.left=child.right;
		child.right.father=me;
		child.right=me;
		child.father=me.father;
		if (me==this.root) {
			this.root=child;
			child.father=NULL_NODE;
			me.father=child;
			return;
		}
		if (me.father.left==me) me.father.left=child; else me.father.right=child;		
		me.father=child;
	}
	
	//left rotation
	private void zag(Node me,Node child){
		NumOfRotation++;
		child.rank=me.rank+child.rank+1;
		me.right=child.left;
		child.left.father=me;
		child.left=me;
		child.father=me.father;
		if (me==this.root) {
			this.root=child;
			child.father=NULL_NODE;
			me.father=child;
			return;
		}
		if (me.father.left==me) me.father.left=child; else me.father.right=child;
		me.father=child;
	}
	/**
	 * 
	 * returns the total number of rotations done in this tree since it was
	 * created. A double rotation counts as two.
	 *
	 * @return number of rotations since tree was created.
	 */
	//DONE: MileStone1
	public int totalRotationCount() {
		return NumOfRotation; // replace by a real calculation.
	}

	/**
	 * return the string produced by an inorder traversal of this tree
	 */
	//DONE: MileStone1
	@Override
	public String toString() {
		StringBuilder ans=new StringBuilder();
		this.root.toString(ans);
		return ans.toString(); // replace by a real calculation.

	}

	/**
	 * This one asks for more info from each node. You can write it like 
	 * the arraylist-based toString() method from the
	 * BST assignment. However, the output isn't just the elements, but the
	 * elements, ranks, and balance codes. Former CSSE230 students recommended
	 * that this method, while making it harder to pass tests initially, saves
	 * them time later since it catches weird errors that occur when you don't
	 * update ranks and balance codes correctly.
	 * For the tree with node b and children a and c, it should return the string:
	 * [b1=, a0=, c0=]
	 * There are many more examples in the unit tests.
	 * 
	 * @return The string of elements, ranks, and balance codes, given in
	 *         a pre-order traversal of the tree.
	 */
	//DONE: MileStone1
	public String toDebugString() {
		ArrayList<String> ans=new ArrayList<>();
		this.root.toDebugArrayList(ans);
		return ans.toString();
	}

	public String debug(){
		StringBuilder ans=new StringBuilder();
		this.root.debug(ans);
		return ans.toString();
	}
	
	
	/**
	 * 
	 * @param pos
	 *            position in the tree
	 * @return the character at that position
	 * @throws IndexOutOfBoundsException
	 */
	//DONE: MileStone1
	public char get(int pos) throws IndexOutOfBoundsException {
		if (pos>=this.size()||pos<0) throw new IndexOutOfBoundsException();
		return this.root.get(pos);
	}

	/**
	 * 
	 * @param c
	 *            character to add to the end of this tree.
	 */
	//DONE: MileStone1
	public void add(char c) {
		// Notes:
		// 1. Please document chunks of code as you go. Why are you doing what
		// you are doing? Comments written after the code is finalized tend to
		// be useless, since they just say WHAT the code does, line by line,
		// rather than WHY the code was written like that. Six months from now,
		// it's the reasoning behind doing what you did that will be valuable to
		// you!
		// 2. Unit tests are cumulative, and many things are based on add(), so
		// make sure that you get this one correct.
		this.add(c,this.size());
	}

	/**
	 * 
	 * @param c
	 *            character to add
	 * @param pos
	 *            character added in this inorder position
	 * @throws IndexOutOfBoundsException
	 *             id pos is negative or too large for this tree
	 */
	//DONE: MileStone1
	public void add(char c, int pos) throws IndexOutOfBoundsException {
		int size=this.size();
		if (pos<0||pos>size) throw new IndexOutOfBoundsException();
		if (size==0){
			this.root=new Node(c, NULL_NODE);
			return;
		}
		this.root.add(c,pos);
	}

	/**
	 * 
	 * @return the number of nodes in this tree
	 */
	//DONE
	public int size() {
		return this.root.size(); // replace by a real calculation.
	}

	/**
	 * 
	 * @param pos
	 *            position of character to delete from this tree
	 * @return the character that is deleted
	 * @throws IndexOutOfBoundsException
	 */
	//TODO: MileStone2
	public char delete(int pos) throws IndexOutOfBoundsException {
		// Implementation requirement:
		// When deleting a node with two children, you normally replace the
		// node to be deleted with either its in-order successor or predecessor.
		// The tests assume assume that you will replace it with the
		// *successor*.
		return '#'; // replace by a real calculation.
	}

	/**
	 * This method operates in O(length*log N), where N is the size of this
	 * tree.
	 * 
	 * @param pos
	 *            location of the beginning of the string to retrieve
	 * @param length
	 *            length of the string to retrieve
	 * @return string of length that starts in position pos
	 * @throws IndexOutOfBoundsException
	 *             unless both pos and pos+length-1 are legitimate indexes
	 *             within this tree.
	 */
	//TODO: MileStone3
	public String get(int pos, int length) throws IndexOutOfBoundsException {
		return "";
	}

	/**
	 * This method is provided for you, and should not need to be changed. If
	 * split() and concatenate() are O(log N) operations as required, delete
	 * should also be O(log N)
	 * 
	 * @param start
	 *            position of beginning of string to delete
	 * 
	 * @param length
	 *            length of string to delete
	 * @return an EditTree containing the deleted string
	 * @throws IndexOutOfBoundsException
	 *             unless both start and start+length-1 are in range for this
	 *             tree.
	 */
	//TODO: MileStone2
	public EditTree delete(int start, int length)
			throws IndexOutOfBoundsException {
		if (start < 0 || start + length >= this.size())
			throw new IndexOutOfBoundsException(
					(start < 0) ? "negative first argument to delete"
							: "delete range extends past end of string");
		EditTree t2 = this.split(start);
		EditTree t3 = t2.split(length);
		this.concatenate(t3);
		return t2;
	}

	/**
	 * Append (in time proportional to the log of the size of the larger tree)
	 * the contents of the other tree to this one. Other should be made empty
	 * after this operation.
	 * 
	 * @param other
	 * @throws IllegalArgumentException
	 *             if this == other
	 */
	//TODO: MileStone3
	public void concatenate(EditTree other) throws IllegalArgumentException {

	}

	/**
	 * This operation must be done in time proportional to the height of this
	 * tree.
	 * 
	 * @param pos
	 *            where to split this tree
	 * @return a new tree containing all of the elements of this tree whose
	 *         positions are >= position. Their nodes are removed from this
	 *         tree.
	 * @throws IndexOutOfBoundsException
	 */
	//TODO: MileStone3
	public EditTree split(int pos) throws IndexOutOfBoundsException {
		return null; // replace by a real calculation.
	}

	/**
	 * Don't worry if you can't do this one efficiently.
	 * 
	 * @param s
	 *            the string to look for
	 * @return the position in this tree of the first occurrence of s; -1 if s
	 *         does not occur
	 */
	//TODO: MileStone3
	public int find(String s) {
		return -2;
	}

	/**
	 * 
	 * @param s
	 *            the string to search for
	 * @param pos
	 *            the position in the tree to begin the search
	 * @return the position in this tree of the first occurrence of s that does
	 *         not occur before position pos; -1 if s does not occur
	 */
	//TODO: MileStone3
	public int find(String s, int pos) {
		return -2;
	}

	/**
	 * @return The root of this tree.
	 */
	public Node getRoot() {
		return this.root;
	}
}
